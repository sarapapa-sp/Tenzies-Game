{"ast":null,"code":"var _jsxFileName = \"D:\\\\shubham\\\\Academic\\\\2 SY\\\\Summer_break\\\\React\\\\scrimba\\\\tenziesgame\\\\src\\\\Game\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./game.css\";\nimport Die from \"./Components/Die\";\nimport { nanoid } from \"nanoid\";\nimport Title from \"./Components/Title\";\nimport Confetti from \"react-confetti\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  function generateDice() {\n    return {\n      value: Math.ceil(Math.random() * 6),\n      isHeld: false,\n      id: nanoid()\n    };\n  } // State to store the array of dice values\n\n\n  const [dice, setDice] = React.useState(allNewDie()); //State to check whether the user won or not\n\n  const [tenzie, setTenzie] = React.useState(false); // Function called when we click the RollButton\n\n  function rollDice() {\n    setDice(prevDice => prevDice.map(die => {\n      return die.isHeld ? die : generateDice();\n    }));\n  } // Using useEffect() to keep the two states in sycs\n\n\n  React.useEffect(() => {\n    const allHeld = dice.every(die => die.isHeld);\n    const firstValue = dice[0].value;\n    const valuesSame = dice.every(die => die.value === firstValue);\n\n    if (allHeld && valuesSame) {\n      console.log(\"You Won\");\n      setTenzie(true);\n    }\n  }, [dice]); // allNewDie() to create the array with 10 random values\n\n  function allNewDie() {\n    const newDice = [];\n\n    for (let i = 0; i < 10; i++) {\n      newDice.push(generateDice());\n    }\n\n    return newDice;\n  }\n\n  function holdDice(id) {\n    setDice(prevDice => dice.map(die => {\n      return die.id === id ? { ...die,\n        isHeld: !die.isHeld\n      } : die;\n    }));\n  } // array of <Die /> elements\n\n\n  const DiceElements = dice.map(die => /*#__PURE__*/_jsxDEV(Die, {\n    value: die.value,\n    isHeld: die.isHeld,\n    handler: () => holdDice(die.id)\n  }, die.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: DiceElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: rollDice,\n      className: \"roll-dice--button\",\n      children: tenzie ? \"Start Game\" : \"Roll Dice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Game, \"joprPfhcKXHzBXPlnzZeZUc3mKA=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","Die","nanoid","Title","Confetti","Game","generateDice","value","Math","ceil","random","isHeld","id","dice","setDice","useState","allNewDie","tenzie","setTenzie","rollDice","prevDice","map","die","useEffect","allHeld","every","firstValue","valuesSame","console","log","newDice","i","push","holdDice","DiceElements"],"sources":["D:/shubham/Academic/2 SY/Summer_break/React/scrimba/tenziesgame/src/Game/Game.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./game.css\";\r\nimport Die from \"./Components/Die\";\r\nimport { nanoid } from \"nanoid\";\r\nimport Title from \"./Components/Title\";\r\nimport Confetti from \"react-confetti\" \r\n\r\nconst Game = () => {\r\n\r\n    function generateDice() {\r\n        return {\r\n                \r\n        value: Math.ceil(Math.random() * 6),\r\n        isHeld: false,\r\n        id: nanoid(),\r\n      \r\n        }\r\n    }\r\n\r\n  // State to store the array of dice values\r\n    const [dice, setDice] = React.useState(allNewDie());\r\n    //State to check whether the user won or not\r\n    const [tenzie,setTenzie] = React.useState(false)\r\n  // Function called when we click the RollButton\r\n  function rollDice() {\r\n      setDice(prevDice => prevDice.map(die => {\r\n          return die.isHeld ?\r\n              die :\r\n              generateDice()\r\n    }));\r\n    }\r\n    // Using useEffect() to keep the two states in sycs\r\n    React.useEffect(() => {\r\n        const allHeld = dice.every(die => die.isHeld)\r\n        const firstValue = dice[0].value\r\n        const valuesSame = dice.every(die => die.value === firstValue)\r\n\r\n        if (allHeld && valuesSame) {\r\n            console.log(\"You Won\")\r\n            setTenzie(true)\r\n        }\r\n    },[dice])\r\n\r\n  // allNewDie() to create the array with 10 random values\r\n  function allNewDie() {\r\n    const newDice = [];\r\n    for (let i = 0; i < 10; i++) {\r\n      newDice.push(generateDice());\r\n    }\r\n\r\n    return newDice;\r\n  }\r\n\r\n  function holdDice(id) {\r\n      setDice(prevDice => dice.map(die => {\r\n          return die.id === id ?\r\n              { ...die, isHeld: !die.isHeld } :\r\n              die\r\n    }))\r\n  }\r\n  // array of <Die /> elements\r\n  const DiceElements = dice.map((die) => (\r\n      <Die\r\n          key={die.id}\r\n          value={die.value}\r\n          isHeld={die.isHeld}\r\n          handler={() => holdDice(die.id)}\r\n      />\r\n  ));\r\n\r\n  return (\r\n      <div className=\"game\">\r\n          {}\r\n          <Title />\r\n      <div className=\"dice-container\">{DiceElements}</div>\r\n      {/* Dice Button */}\r\n      <button onClick={rollDice} className=\"roll-dice--button\">\r\n        {tenzie ? \"Start Game\" : \"Roll Dice\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}